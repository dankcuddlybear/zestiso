#!/bin/sh
DEBUG=1
DebugMsg() {
   [ ! -z "$DEBUG" ] && [ "$DEBUG" == 1 ] && echo "[DEBUG] $1"
}
ThrowError() {
   echo "[ERROR] $1"; exit 1
}
Help() {
   echo "Usage: $(basename "$0") <COMMAND>"
   echo "List of commands:"
   echo "  help|-h    # Print this help. Default if no command specified."
   echo "  install|-i # Install GRUB and generate grub configuration file."
   echo "               For UEFI, this will install GRUB on esp:/EFI/GRUB/grubx64.efi"
   echo "               where esp: is the mount directory of the EFI system partition"
   echo "               (usually /boot or /boot/efi)"
   echo "  update|-u  # Update GRUB and generate grub configuration file"
   echo "  config|-c  # Create grub configuration file"
   #echo "  remove|-r  # Remove GRUB bootloader from your system."
   #echo "               You still need to uninstall the grub package seperately"
   #echo "               using your package manager."
}

## Check boot mode
if [ -f /sys/firmware/efi/fw_platform_size ]; then
    [ "$(cat /sys/firmware/efi/fw_platform_size)" == 32 ] && \
    BOOT_MODE="i386-efi" || BOOT_MODE="x86_64-efi"
else BOOT_MODE="i386-pc"; fi

GetESPMountDir() {
    ## Find all FAT partitions mounted under (not mounted on) root (/)
    ## Check for EFI directory and add to list of ESPs
    FAT_PARTITIONS=$(lsblk -Pno KNAME,FSTYPE,MOUNTPOINT | \
    grep -v "MOUNTPOINT=\"\"" | grep -v "MOUNTPOINT=\"/\"" | \
    grep "FSTYPE=\"vfat\"" | cut -d '"' -f 2 | xargs )
    EFI_PARTITIONS=""; for PARTITION in $FAT_PARTITIONS; do
        FAT_MOUNT_DIR="$(lsblk -Pno MOUNTPOINT "/dev/$PARTITION" | cut -d '"' -f 2 | xargs)"
        if [ -d "$FAT_MOUNT_DIR/EFI" ]; then # Case doesn't matter on FAT volumes
            EFI_PARTITIONS="$(echo "$EFI_PARTITIONS $PARTITION" | xargs)"
        fi
    done; [ -z "$EFI_PARTITIONS" ] && ThrowError "EFI system partition not found"
    #
    ## Pick the first EFI system partition.
    ## There should only be one. If there is more than one mounted,
    ## the script may install to the wrong one. That's the user's fault, anyway.
    ## Maybe I'll improve ESP detection in the future, if I can be bothered.
    EFI_INSTALL_PARTITION="$(echo "$EFI_PARTITIONS" | cut -d ' ' -f 1)"
    #
    ## Find the drive partition number and EFI directory, then install GRUB
    EFI_INSTALL_DISK="$(lsblk -Pno PKNAME /dev/$EFI_INSTALL_PARTITION | cut -d '"' -f 2)"
    EFI_INSTALL_PARTITION_NO="$(lsblk -Pno PARTN /dev/$EFI_INSTALL_PARTITION | cut -d '"' -f 2)"
    ESP_DIR="$(lsblk -Pno MOUNTPOINT /dev/$EFI_INSTALL_PARTITION | cut -d '"' -f 2)"
    echo "$ESP_DIR"
}

InstallGrub() {
    DebugMsg "BOOT MODE: \"$BOOT_MODE\""
    if [ "$BOOT_MODE" == "i386-pc" ]; then ## BIOS install
        if [ -d /boot/grub ] || ([ ! -z "$1" ] && [ "$1" == "--force" ]); then
            ## Get all physical volumes that make up root filesystem
            SYS_DISKS=$(lsblk -Pno PKNAME,FSROOTS | grep "FSROOTS=\"/\"" | cut -d '"' -f 2 | xargs)
            ## If /boot partition found on a different disk, add it to the top of the list
            BOOT_DISK="$(lsblk -Pno KNAME,PKNAME,MOUNTPOINTS | sed 's/ /,/g' | grep "MOUNTPOINTS=\"/boot\"" | cut -d '"' -f 4)"
            [ ! -z "$BOOT_DISK" ] && SYS_DISKS="$(echo "$BOOT_DISK $SYS_DISKS" | xargs)"
            ## Remove duplicates
            SYS_DISKS=$(echo $SYS_DISKS | sed -r ':a; s/\b([[:alnum:]]+)\b(.*)\b\1\b/\1\2/g; ta; s/(, )+/, /g; s/, *$//' | xargs)
            ## Throw error if no disks found
            [ -z "$SYS_DISKS" ] && ThrowError "Could not find any suitable disk to install bootloader."
            #
            echo "SYS DISKS: $SYS_DISKS"; exit
            #
            ## Find the parent device for each volume
            PARENTS="unknown"; while [ ! -z "$PARENTS" ]; do
                PARENTS=""
                for DISK in $SYS_DISKS; do
                    PARENT="$(lsblk -Pno KNAME,PKNAME /dev/$DISK | grep -m 1 "$DISK" | cut -d '"' -f 4)"
                    [ ! -z "$PARENT" ] && PARENTS="$(echo "$PARENTS $PARENT" | xargs)"
                done
                [ ! -z "$PARENTS" ] && SYS_DISKS="$PARENTS" && PARENTS=""
            done; DebugMsg "Linux installed on: $SYS_DISKS"
            #
            ## Find any disks with a Windows C: partition and add to exclude list.
            DebugMsg; DebugMsg "Scanning all disks for Windows partitions..."
            WINDOWS_SYS_DISKS=""; for DISK in $SYS_DISKS; do
                IFS=';'; for VOLUME in $(lsblk /dev/$DISK -Pno KNAME,FSTYPE | \
                grep -v "KNAME=\"$DISK\"" | grep "FSTYPE=\"ntfs\"" | \
                sed 's/ /,/g' | sed ':a;N;$!ba;s/\n/;/g'); do
                    VOLUME="$(echo $VOLUME | cut -d '"' -f 2)"
                    DebugMsg "  Found NTFS partition /dev/$VOLUME on disk /dev/$DISK, checking for Windows files..."
                    WINDOWS_FILES="$(ntfsls -a /dev/$VOLUME | grep "Documents and Settings\|Program Files\|ProgramData\|Windows" | xargs)"
                    if [ ! -z "$WINDOWS_FILES" ] && ( \
                        [ "$WINDOWS_FILES" == "Documents and Settings Program Files Program Files (x86) ProgramData Windows" ] || \
                        [ "$WINDOWS_FILES" == "Documents and Settings Program Files ProgramData Windows" ])
                    then
                        DebugMsg "  Windows is installed on partition /dev/$VOLUME, excluding disk /dev/$DISK..."
                        WINDOWS_SYS_DISKS="$(echo "$WINDOWS_SYS_DISKS $DISK" | xargs)"
                    fi
                done
            done
            #
            ## Exclude disks with Windows installed.
            [ ! -z "$WINDOWS_SYS_DISKS" ] && DebugMsg "WINDOWS INSTALLED ON: $WINDOWS_SYS_DISKS"
            if [ ! -z "$WINDOWS_SYS_DISKS" ]; then
                for DISK in $WINDOWS_SYS_DISKS; do
                    SYS_DISKS="$(echo "$SYS_DISKS" | sed "s/$DISK//g" | xargs)"
                    sleep 0
                done
            fi
            #
            ## Verify that there are non-Windows disks available.
            DebugMsg; DebugMsg "AVAILABLE DISKS: $SYS_DISKS"
            if [ -z "$SYS_DISKS" ]; then
                echo
                echo "[ERROR] Cannot install BIOS bootloader on a disk with Windows installed."
                echo "        This would overwrite the Windows bootloader and make Windows unbootable."
                echo "        Add a new disk or delete the Windows C: partition, and try again."
                exit 1
            fi
            #
            ## Check MBRs on disk, and prefer the 1st available MBR with GRUB installed.
            DebugMsg; DebugMsg "Searching for existing GRUB bootloader..."
            DISK_PREFERRED=""; IFS=' '; for DISK in $SYS_DISKS; do
                PTABLE="$(lsblk /dev/$DISK -Pno KNAME,PTTYPE | grep -m 1 "$DISK" | cut -d '"' -f 4)"
                #
                ## Search for the 1st GRUB MBR on disk.
                if [ "$PTABLE" == "dos" ]; then
                hexdump -cn 512 /dev/$DISK | sed 's/ //g' | grep "GRUB" &> /dev/null && \
                DISK_PREFERRED="$(echo "$DISK_PREFERRED $DISK" | xargs)" && \
                DebugMsg "  Found GRUB MBR on /dev/$DISK"
                #
                ## If the partition table is GPT, check for BIOS boot partition.
                elif [ "$PTABLE" == "gpt" ]; then
                HAS_BIOS_BOOT_PARTITION=0
                IFS=';'; for PARTITION in $(lsblk $DISK -Pno KNAME,PARTTYPENAME | grep -v "KNAME=\"$DISK\"" | sed 's/ /,/g' | sed ':a;N;$!ba;s/\n/;/g'); do
                    PARTITION="$(echo $PARTITION | cut -d '"' -f 2)"
                    PARTTYPENAME="$(echo $PARTITION | cut -d '"' -f 4)"
                    if [ ! -z "$PARTTYPENAME" ] && [ "$PARTTYPENAME" == "BIOS,boot" ]; then
                        [ "$HAS_BIOS_BOOT_PARTITION" == "1" ]
                        DebugMsg "  Found BIOS boot partition on /dev/$PARTITION, checking for GRUB..."
                        #
                        ## Check if GRUB is installed on the BIOS boot partition.
                        if [ ! -z "$(hexdump -cn 512 "/dev/$PARTITION" | sed 's/ //g' | grep "Geom")" ]; then
                            DISK_PREFERRED="$(echo "$DISK_PREFERRED $DISK" | xargs)"
                            DebugMsg "    Found GRUB in boot partition /dev/$PARTITION"
                        fi
                    else # If no BIOS boot partition found, skip this disk
                        DebugMsg "  Disk /dev/$DISK is type GPT but is missing required BIOS boot partition. Skipping..."
                        SYS_DISKS="$(echo "$SYS_DISKS" | sed "s/$DISK//g" | xargs)"
                    fi
                done
            else
                DebugMsg "  Unrecognised partition table type \"$PTABLE\", skipping..."
                SYS_DISKS="$(echo "$SYS_DISKS" | sed "s/$DISK//g" | xargs)"
            fi
            done
            #
            ## Verify that there are disks available with valid MBR/boot partition.
            DebugMsg; DebugMsg "AVAILABLE DISKS: $SYS_DISKS"
            [ ! -z "$DISK_PREFERRED" ] && DebugMsg "PREFERRED DISKS: $DISK_PREFERRED"
            if [ -z "$SYS_DISKS" ]; then
                echo
                echo "[ERROR] Cannot install bootloader. You must have at least 1 disk"
                echo "        on which Windows is not installed, with either MBR partition table"
                echo "        or GPT partition table with BIOS boot partition of at least 1MiB."
                exit 1
            fi
            #
            ## If a disk with existing GRUB MBR has been found, install here.
            ## If not found, overwrite 1st MBR.
            if [ ! -z "$DISK_PREFERRED" ]; then
                INSTALL_DISK="$(echo "$DISK_PREFERRED" | cut -d ' ' -f 1)"
            else INSTALL_DISK="$(echo "$SYS_DISKS" | cut -d ' ' -f 1)"; fi
            DebugMsg "INSTALL DISK: $INSTALL_DISK"
            #
            ## Install GRUB to MBR of Linux boot disk
            grub-install --target=i386-pc /dev/$INSTALL_DISK
        else echo "GRUB bootloader is not installed, skipping GRUB update."; fi
    #
    elif [ "$BOOT_MODE" == "x86_64-efi" ] || [ "$BOOT_MODE" == "i386-efi" ]; then ## UEFI install
        ESP_DIR="$(GetESPMountDir)"
        DebugMsg "Installing GRUB to ESP (mounted on: $ESP_DIR)"
        grub-install --target="$BOOT_MODE" --efi-directory="$ESP_DIR" --bootloader-id=GRUB
    fi
}

UpdateGrubCfg() {
    if [ "$BOOT_MODE" == "i386-pc" ]; then ## BIOS
        ## For BIOS, grub.cfg will always be on /boot/grub/grub.cfg
        if [ -d /boot/grub ]; then grub-mkconfig -o /boot/grub/grub.cfg
        else echo "GRUB bootloader is not installed, skipping GRUB configuration."; fi
    elif [ "$BOOT_MODE" == "x86_64-efi" ] || [ "$BOOT_MODE" == "i386-efi" ]; then ## UEFI
        ## For UEFI, grub.cfg will be on esp:/grub/grub.cfg
        ## So we need to find the mount directory of the ESP.
        ESP_DIR="$(GetESPMountDir)"
        if [ -d "$ESP_DIR/grub" ]; then grub-mkconfig -o "$ESP_DIR/grub/grub.cfg"
        else echo "GRUB bootloader is not installed, skipping GRUB configuration."; fi
    fi
}

case $1 in
    install|--install|-i)
        [ "$(whoami)" != "root" ] && ThrowError "You must run this script as root user."
        InstallGrub --force; UpdateGrubCfg;;
    update|--update|-u)
        [ "$(whoami)" != "root" ] && ThrowError "You must run this script as root user."
       InstallGrub; UpdateGrubCfg;;
    config|--config|-c)
        [ "$(whoami)" != "root" ] && ThrowError "You must run this script as root user."
       UpdateGrubCfg;;
    remove|--remove|-r)
        echo "Not supported yet";;
    ""|help|--help|-h) Help;;
    *) echo "[ERROR] Invalid command \"$1\""; Help; exit 1;;
esac

